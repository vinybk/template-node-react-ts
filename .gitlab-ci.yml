stages:
  - test
  - build
  - deploy

variables:
  FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/template-frontend"
  BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/template-backend"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker

cache:
  paths:
    - frontend/node_modules/
    - backend/node_modules/

test:
  stage: test
  image: node:22-alpine
  script:
    - echo "Running tests for frontend"
    - cd frontend
    - npm ci
    - npm test
    - echo "Running tests for backend"
    - cd ../backend
    - npm ci
    - npm test
  only:
    - main
    - staging

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - git fetch --tags
    - LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
    - VERSION=${LATEST_TAG#v} # Strip 'v' from tag
    - MAJOR=$(echo $VERSION | cut -d. -f1)
    - MINOR=$(echo $VERSION | cut -d. -f2)
    - PATCH=$(echo $VERSION | cut -d. -f3)

    # Main branch uses versioning logic
    - if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then apk add --no-cache curl jq && echo "Fetching merge request details..." && curl --header "PRIVATE-TOKEN:$CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID" -o merge_request.json && echo "Merge request details:" && cat merge_request.json && INCREMENT=$(cat merge_request.json | jq -r '.labels[] | select(. == "major" or . == "minor" or . == "patch")' || echo "patch") && echo "Detected increment:$INCREMENT"; fi

    - if [[ -z $INCREMENT ]]; then INCREMENT="patch"; fi
    - if [[ "$CI_COMMIT_BRANCH" == "main" && "$INCREMENT" == "major" ]]; then MAJOR=$((MAJOR + 1)) MINOR=0 PATCH=0; elif [[ "$INCREMENT" == "minor" ]]; then MINOR=$((MINOR + 1)) PATCH=0; else PATCH=$((PATCH + 1)); fi; echo "MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
    
    - NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
    - export VERSION=$NEW_VERSION
    
    # Staging branch always uses the "staging" tag
    - if [[ "$CI_COMMIT_BRANCH" == "staging" ]]; then export VERSION="staging"; fi

    # Build and push Docker images
    - docker build -t ${FRONTEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Frontend .
    - docker build -t ${BACKEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Backend .
    - docker push ${FRONTEND_IMAGE_NAME}:${VERSION}
    - docker push ${BACKEND_IMAGE_NAME}:${VERSION}

    # Push 'latest' tag only for the main branch
    - if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then docker tag ${FRONTEND_IMAGE_NAME}:${VERSION} ${FRONTEND_IMAGE_NAME}:latest && docker tag ${BACKEND_IMAGE_NAME}:${VERSION} ${BACKEND_IMAGE_NAME}:latest && docker push ${FRONTEND_IMAGE_NAME}:latest && docker push ${BACKEND_IMAGE_NAME}:latest && echo "Latest tags pushed"; fi

  only:
    - main
    - staging
    
    
deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Install SSH tools and create the .ssh directory
    - apk update && apk add --no-cache openssh sshpass
    - mkdir -p ~/.ssh

    # Decode the Base64 private key and save it to ~/.ssh/id_rsa
    - echo "$HOST_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Add the VPS host to known_hosts to avoid authenticity confirmation prompts
    - ssh-keyscan -H "$HOST_URL" >> ~/.ssh/known_hosts

    # Start ssh-agent and add the private key with the passphrase
    - eval $(ssh-agent -s)
    - echo "$HOST_PASSPHRASE" | ssh-add ~/.ssh/id_rsa

  script:
    # Test the SSH connection
    - echo "Testing connection to VPS"
    - ssh $VPS_USER@$HOST_URL "echo 'SSH connection successful'"

    # Creating .env file
    - if [[ "$CI_COMMIT_BRANCH" == "staging" ]]; then echo "FRONTEND_PORT=3001" > .env && echo "BACKEND_PORT=5001" >> .env && echo "POSTGRES_CONNECTION_STRING=$POSTGRES_CONNECTION_STRING_STAGE" >> .env && echo "FRONTEND_IMAGE=${FRONTEND_IMAGE_NAME}:staging" >> .env && echo "BACKEND_IMAGE=${BACKEND_IMAGE_NAME}:staging" >> .env; else echo "FRONTEND_PORT=3000" > .env && echo "BACKEND_PORT=5000" >> .env && echo "POSTGRES_CONNECTION_STRING=$POSTGRES_CONNECTION_STRING_PROD" >> .env && echo "FRONTEND_IMAGE=${FRONTEND_IMAGE_NAME}:latest" >> .env && echo "BACKEND_IMAGE=${BACKEND_IMAGE_NAME}:latest" >> .env; fi

    # Ensure the target directory exists on the remote server
    - ssh $VPS_USER@$HOST_URL "mkdir -p /home/$VPS_USER/$CI_PROJECT_NAME"

    # Copy the environment and docker-compose files to the target directory
    - scp .env docker-compose.yml $VPS_USER@$HOST_URL:/home/$VPS_USER/$CI_PROJECT_NAME/

    # Create specific composes
    - ssh $VPS_USER@$HOST_URL "if [[ \"$CI_COMMIT_BRANCH\" == \"staging\" ]]; then mv /home/$VPS_USER/$CI_PROJECT_NAME/docker-compose.yml /home/$VPS_USER/$CI_PROJECT_NAME/docker-compose.staging.yml; else mv /home/$VPS_USER/$CI_PROJECT_NAME/docker-compose.yml /home/$VPS_USER/$CI_PROJECT_NAME/docker-compose.production.yml; fi"

    # Connect to the VPS and deploy the application
    - echo "Deploying application"
    - ssh -i ~/.ssh/id_rsa $VPS_USER@$HOST_URL "cd /home/$VPS_USER/$CI_PROJECT_NAME && set -a && source .env && set +a && echo 'Debugging .env file:' && cat .env && echo 'Extracted FRONTEND_IMAGE:' && grep FRONTEND_IMAGE .env | cut -d '=' -f2 && echo 'Extracted BACKEND_IMAGE:' && grep BACKEND_IMAGE .env | cut -d '=' -f2 && docker pull \$(grep FRONTEND_IMAGE .env | cut -d '=' -f2) && docker pull \$(grep BACKEND_IMAGE .env | cut -d '=' -f2) && if [[ \"$CI_COMMIT_BRANCH\" == \"staging\" ]]; then docker compose -f docker-compose.staging.yml up -d; else docker compose -f docker-compose.production.yml up -d; fi"

    - ssh $VPS_USER@$HOST_URL "docker ps"


  only:
    - main
    - staging
