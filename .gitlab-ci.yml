stages:
  - test
  - build
  - deploy

variables:
  FRONTEND_IMAGE: "${CI_REGISTRY_IMAGE}/template-node-react-ts-frontend"
  BACKEND_IMAGE: "${CI_REGISTRY_IMAGE}/template-node-react-ts-backend"
  VERSION: "latest"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker

cache:
  paths:
    - node_modules/

test:
  stage: test
  image: node:22-alpine
  only:
    - develop
    - main
  script:
    - echo "Running tests for frontend and backend"
    - npm ci
    - npm test
  only:
    - develop
    - main


build:
  stage: build
  image: docker:latest
  services:
    - docker:dind  
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Building Docker images"
    - if [ "$CI_COMMIT_REF_NAME" == "main" ]; then 
        docker build -t $FRONTEND_IMAGE_NAME:$VERSION -f ./Dockerfile-Frontend;
        docker build -t $BACKEND_IMAGE_NAME:$VERSION -f ./Dockerfile-Backend;
        docker push $FRONTEND_IMAGE_NAME:$VERSION; 
        docker push $BACKEND_IMAGE_NAME:$VERSION; 
      fi
    - if [ "$CI_COMMIT_REF_NAME" == "develop" ]; then 
        docker build -t $FRONTEND_IMAGE_NAME-dev:$VERSION -f ./Dockerfile-Frontend-dev;
        docker build -t $BACKEND_IMAGE_NAME-dev:$VERSION -f ./Dockerfile-Backend-dev;
        docker push $FRONTEND_IMAGE_NAME-dev:$VERSION; 
        docker push $BACKEND_IMAGE_NAME-dev:$VERSION; 
    fi

deploy:
  stage: deploy
  image: docker:24.0
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker
  before_script:
    - echo "Setting up SSH credentials"
    - apk update && apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$HOST_PRIVATE_KEY_B64" | base64 --decode > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$HOST_URL" >> ~/.ssh/known_hosts

  script:
    - echo "Sending secrets to VPS and deploying application"
    - scp .env docker-compose.* ${VPS_USER}@{HOST_URL}:/home/ubuntu/template-node-react-ts-frontend
    - |
      ssh ${VPS_USER}@${HOST_URL} << EOF
        cd /home/ubuntu/
        rm -rf template-node-react-ts
        mkdir -p template-node-react-ts
        cd template-node-react-ts
        echo "Decoding secrets and writing to file"
        echo "POSTGRES_CONNECTION_STRING_DEV=\$(echo $POSTGRES_CONNECTION_STRING_DEV_B64 | base64 --decode)" >> .env
        echo "POSTGRES_CONNECTION_STRING_PROD=\$(echo $POSTGRES_CONNECTION_STRING_PROD_B64 | base64 --decode)" >> .env
        echo "FRONTEND_IMAGE=\$FRONTEND_IMAGE:$VERSION" >> .env
        echo "BACKEND_IMAGE=\$BACKEND_IMAGE:$VERSION" >> .env
        chmod 600 .env

        if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
          docker compose -f docker-compose.yml build;
          docker compose -f docker-compose.yml push;
        fi
        if [ "$CI_COMMIT_REF_NAME" == "develop" ]; then
          docker compose -f docker-compose.dev.yml build;
          docker compose -f docker-compose.dev.yml push;
        fi

      EOF

  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: manual
    - when: always

