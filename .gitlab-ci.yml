stages:
  - test
  - build
  - deploy

variables:
  FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sharednotes-frontend"
  BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sharednotes-backend"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker

cache:
  paths:
    - frontend/node_modules/
    - backend/node_modules/

test:
  stage: test
  image: node:22-alpine
  script:
    - echo "Running tests for frontend"
    - cd frontend
    - npm ci
    - npm test
    - echo "Running tests for backend"
    - cd ../backend
    - npm ci
    - npm test
  only:
    - staging

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - git fetch --tags
    - LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
    - VERSION=${LATEST_TAG#v} # Strip 'v' from tag
    - MAJOR=$(echo $VERSION | cut -d. -f1)
    - MINOR=$(echo $VERSION | cut -d. -f2)
    - PATCH=$(echo $VERSION | cut -d. -f3)

    # Staging branch always uses the "staging" tag
    - if [[ "$CI_COMMIT_BRANCH" == "staging" ]]; then
        export VERSION="staging"
      fi

    # Main branch uses versioning logic
    - if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
      curl --header "PRIVATE-TOKEN:$CI_JOB_TOKEN" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID" \
        -o merge_request.json
      fi
    - INCREMENT=$(cat merge_request.json | jq -r '.labels[] | select(. == "increment-major" or . == "increment-minor" or . == "increment-patch")')
    - if [[ -z $INCREMENT ]]; then
          INCREMENT="increment-patch"
      fi
    - if [[ "$CI_COMMIT_BRANCH" == "main" && "$INCREMENT" == "increment-major" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
      elif [[ "$INCREMENT" == "increment-minor" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
      else
          PATCH=$((PATCH + 1))
      fi
    - NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
    - export VERSION=$NEW_VERSION

    # Build and push Docker images
    - docker build -t ${FRONTEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Frontend .
    - docker build -t ${BACKEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Backend .
    - docker push ${FRONTEND_IMAGE_NAME}:${VERSION}
    - docker push ${BACKEND_IMAGE_NAME}:${VERSION}

    # Push 'latest' tag only for the main branch
    - if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        docker tag ${FRONTEND_IMAGE_NAME}:${VERSION} ${FRONTEND_IMAGE_NAME}:latest
        docker tag ${BACKEND_IMAGE_NAME}:${VERSION} ${BACKEND_IMAGE_NAME}:latest
        docker push ${FRONTEND_IMAGE_NAME}:latest
        docker push ${BACKEND_IMAGE_NAME}:latest
      fi

    # Deploy to VPS
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$HOST_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$HOST_URL" >> ~/.ssh/known_hosts
    - scp docker-compose.* .env $VPS_USER@$HOST_URL:/home/ubuntu/shared-notes/
    - ssh -i ~/.ssh/id_rsa $VPS_USER@$HOST_URL "
        cd /home/ubuntu/shared-notes &&
        set -a && source .env && set +a &&
        docker pull $FRONTEND_IMAGE_NAME:$VERSION &&
        docker pull $BACKEND_IMAGE_NAME:$VERSION &&
        docker compose -f docker-compose.yml up -d --remove-orphans
      "
  only:
    - staging
    - main





deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker
  needs:
    - build
  before_script:
    # Install SSH tools and create the .ssh directory
    - apk update && apk add --no-cache openssh sshpass
    - mkdir -p ~/.ssh

    # Decode the Base64 private key and save it to ~/.ssh/id_rsa
    - echo "$HOST_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Add the VPS host to known_hosts to avoid authenticity confirmation prompts
    - ssh-keyscan -H "$HOST_URL" >> ~/.ssh/known_hosts

    # Start ssh-agent and add the private key with the passphrase
    - eval $(ssh-agent -s)
    - echo "$HOST_PASSPHRASE" | ssh-add ~/.ssh/id_rsa

  script:
    # Prepare the environment variables for deployment
    - echo "Preparing environment variables"
    - echo "POSTGRES_CONNECTION_STRING_DEV=$(echo $POSTGRES_CONNECTION_STRING_DEV_B64 | base64 -d)" > .env
    - echo "POSTGRES_CONNECTION_STRING_PROD=$(echo $POSTGRES_CONNECTION_STRING_PROD_B64 | base64 -d)" >> .env
    - echo "VERSION=$VERSION" >> .env

    # Copy .env and docker-compose files to the remote server
    - echo "Copying deployment files to VPS"
    - scp .env docker-compose.* $VPS_USER@$HOST_URL:/home/ubuntu/shared-notes/

    # Connect to the VPS and deploy the application
    - echo "Deploying application"
    - ssh -v -i ~/.ssh/id_rsa $VPS_USER@$HOST_URL "
      cd /home/ubuntu/shared-notes &&
      set -a && source .env && set +a &&
      echo 'Pulling Docker images' &&
      docker pull $FRONTEND_IMAGE_NAME:$VERSION &&
      docker pull $BACKEND_IMAGE_NAME:$VERSION &&
      echo 'Deploying containers with Docker Compose' &&
      docker compose -f docker-compose.yml up -d --remove-orphans
      "
  only:
    - staging
    - main
