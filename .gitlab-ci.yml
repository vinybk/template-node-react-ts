stages:
  - test
  - build
  - deploy

variables:
  FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sharednotes-frontend"
  BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sharednotes-backend"
  VERSION: "latest"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker

cache:
  paths:
    - frontend/node_modules/
    - backend/node_modules/

test:
  stage: test
  image: node:22-alpine
  only:
    - develop
    - main
  script:
    - echo "Running tests for frontend"
    - cd frontend
    - npm ci
    - npm test
    - echo "Running tests for backend"
    - cd ../backend
    - npm ci
    - npm test
  dependencies:
    - check_and_prepare # Use artifacts from the previous stage
  only:
    - develop
    - main

build:
  stage: build
  image: docker:24.0
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Building Docker images"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        TAG="$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")-dev"
      else
        TAG="$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")"
      fi
      export VERSION=$TAG
    - if [[ $CI_COMMIT_BRANCH == "develop" ]]; then docker build -t ${FRONTEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Frontend.dev .; else docker build -t ${FRONTEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Frontend .; fi
    - if [[ $CI_COMMIT_BRANCH == "develop" ]]; then docker build -t ${BACKEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Backend.dev .; else docker build -t ${BACKEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Backend .; fi
    - docker push ${FRONTEND_IMAGE_NAME}:${VERSION}
    - docker push ${BACKEND_IMAGE_NAME}:${VERSION}
  only:
    - develop
    - main
    - tags

deploy:
  stage: deploy
  image: docker:24.0
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker
  before_script:
    - echo "Setting up SSH credentials"
    - mkdir -p ~/.ssh
    - echo "$HOST_PRIVATE_KEY_B64" | base64 --decode > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$HOST_URL" >> ~/.ssh/known_hosts
  script:
    - echo "Sending secrets to VPS and deploying application"
    - |
      ssh ${VPS_USER}@${HOST_URL} << EOF
        mkdir -p /home/ubuntu/shared-notes
        echo "Decoding secrets and writing to file"
        echo "POSTGRES_CONNECTION_STRING_DEV=\$(echo $POSTGRES_CONNECTION_STRING_DEV_B64 | base64 --decode)" >> /home/ubuntu/shared-notes/secrets.env
        echo "POSTGRES_CONNECTION_STRING_PROD=\$(echo $POSTGRES_CONNECTION_STRING_PROD_B64 | base64 --decode)" >> /home/ubuntu/shared-notes/secrets.env
        chmod 600 /home/ubuntu/shared-notes/secrets.env

        echo "Pulling Docker images"
        docker pull ${FRONTEND_IMAGE_NAME}:${VERSION}
        docker pull ${BACKEND_IMAGE_NAME}:${VERSION}

        echo "Deploying containers with Docker Compose"
        docker-compose -f docker-compose.yml up -d --remove-orphans
      EOF
  only:
    - main
