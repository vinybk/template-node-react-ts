stages:
  - test
  - build
  - deploy

variables:
  FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sharednotes-frontend"
  BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sharednotes-backend"
  VERSION: "latest"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker

cache:
  paths:
    - frontend/node_modules/
    - backend/node_modules/

test:
  stage: test
  image: node:22-alpine
  only:
    - develop
    - main
  script:
    - echo "Running tests for frontend"
    - cd frontend
    - npm ci
    - npm test
    - echo "Running tests for backend"
    - cd ../backend
    - npm ci
    - npm test
  only:
    - develop
    - main

build:
  stage: build
  image: docker:24.0
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Building Docker images"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        TAG="$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")-dev"
      else
        TAG="$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")"
      fi
      export VERSION=$TAG
    - if [[ $CI_COMMIT_BRANCH == "develop" ]]; then docker build -t ${FRONTEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Frontend.dev .; else docker build -t ${FRONTEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Frontend .; fi
    - if [[ $CI_COMMIT_BRANCH == "develop" ]]; then docker build -t ${BACKEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Backend.dev .; else docker build -t ${BACKEND_IMAGE_NAME}:${VERSION} -f ./Dockerfile-Backend .; fi
    - docker push ${FRONTEND_IMAGE_NAME}:${VERSION}
    - docker push ${BACKEND_IMAGE_NAME}:${VERSION}
  only:
    - develop
    - main
    - tags

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS for Docker-in-Docker
  needs:
    - build
  before_script:
    - apk update && apk add --no-cache openssh  # Ensure SSH is available
    - mkdir -p ~/.ssh
    - echo "$HOST_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$HOST_URL" >> ~/.ssh/known_hosts

  script:
    - echo "Preparing environment variables"
    - echo "POSTGRES_CONNECTION_STRING_DEV=$(echo $POSTGRES_CONNECTION_STRING_DEV_B64 | base64 -d)" > .env
    - echo "POSTGRES_CONNECTION_STRING_PROD=$(echo $POSTGRES_CONNECTION_STRING_PROD_B64 | base64 -d)" >> .env
    - echo "VERSION=$VERSION" >> .env
    - scp .env docker-compose.* $VPS_USER@$HOST_URL:/home/ubuntu/shared-notes/
    - echo "Deploying application"
    - ssh -v -i ~/.ssh/id_rsa $VPS_USER@$HOST_URL "
      cd /home/ubuntu/shared-notes && set -a && source .env && set +a &&
      echo 'Pulling Docker images' &&
      docker pull $FRONTEND_IMAGE_NAME:$VERSION &&
      docker pull $BACKEND_IMAGE_NAME:$VERSION &&
      echo 'Deploying containers with Docker Compose' &&
      docker compose -f docker-compose.yml up -d --remove-orphans
    "

  only:
    - main
