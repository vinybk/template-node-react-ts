services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile-Frontend.dev  # Consistent naming with production Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${FRONTEND_NODE_ENV:-development}
      - API_URL=http://backend:${BACKEND_PORT:-5000}  # Enables internal network communication
      - PORT=${FRONTEND_PORT:-3000}
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - ./shared:/shared
      - /app/node_modules
    command: "npm run dev"
    depends_on:
      - backend
    networks:
      - app-network

    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./shared
          target: /shared
        - action: rebuild
          path: ./frontend/package.json
        - action: rebuild
          path: ./frontend/package-lock.json

  backend:
    build:
      context: ./
      dockerfile: Dockerfile-Backend.dev
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - NODE_ENV=${BACKEND_NODE_ENV:-development}
      - PORT=${BACKEND_PORT:-5000}
      - POSTGRES_CONNECTION_STRING=${POSTGRES_CONNECTION_STRING:?Missing Postgres connection string}
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: "npm run dev"
    networks:
      - app-network

    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./shared
          target: /shared
        - action: rebuild
          path: ./backend/package.json
        - action: rebuild
          path: ./backend/package-lock.json

networks:
  app-network:
    driver: bridge
